from wordwield import ww
from wordwield.lib.vdb import VDB


character = ww.schemas.CharacterSchema.put(
	name          = '–í–∞—Å—è',
	descriptions  = ['–ø—Ä–æ—Å—Ç–æ–π —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–µ–Ω—å 35 –ª–µ—Ç'],
	description   = '–ø—Ä–æ—Å—Ç–æ–π —Ö–æ—Ä–æ—à–∏–π –ø–∞—Ä–µ–Ω—å 35 –ª–µ—Ç',
	fear          = '–±–æ–∏—Ç—Å—è –Ω–µ –≤–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ–±—â–µ—Å—Ç–≤–æ',
	desire        = '—Ö–æ—á–µ—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã–º –∏ –ª—é–±–∏–º—ã–º',
	bypass        = '—Å–ª—É–∂–µ–Ω–∏–µ, –ø–æ —ç—Ç–æ–º—É –í–∞—Å—è –∏–∑—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
	manipulation1 = '—Å–ª—É–∂–µ–Ω–∏–µ, —É–≤–∞–∂–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ',
	manipulation2 = '—Å–ª—ë–∑—ã',
	resource      = '–Ω—É–∂–Ω–æ—Å—Ç—å',
	trigger       = '–Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–π —ç–Ω—Ç—É–∑–∏–∞–∑–º',
	voice1        = '—è —Ö–æ—Ä–æ—à–∏–π –º–∞–ª—å—á–∏–∫ –∏ –º–Ω–æ–≥–æ–µ –º–æ–≥—É –¥–∞—Ç—å',
	voice2        = '—è –ø–ª–æ—Ö–æ–π –∏ –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω',
	problem       = '—Å—Ç—Ä–∞—Ö –æ–±—â–µ–Ω–∏—è',
	mission       = '—Å—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º, —Ç–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –Ω—É–∂–µ–Ω –ª—é–¥—è–º',
	schtick       = '—Ö–æ—Ä–æ—à–∏–π —É—á–µ–Ω–∏–∫',
	speech_style  = '–∑–∞–∏–∫–∞–Ω–∏–µ'
)

vasya_messages = [
	'–°–∞—à–∞, –æ–±—ä—è—Å–Ω–∏, –∑–∞—á–µ–º –≤–æ–æ–±—â–µ –Ω—É–∂–Ω—ã —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–¥–µ?',
	'–ê –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫—É—Å–æ–∫ –∫–æ–¥–∞ —Ç—É–¥–∞, –≥–¥–µ –Ω—É–∂–Ω–æ?',
	'–ü–æ–Ω—è–ª. –ê –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è?',
	'–ê –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —É–∑–Ω–∞–µ—Ç, —Å –∫–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å?',
	'–ê —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ?',
	'–ê –º–æ–∂–Ω–æ –ª–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é?',
]

sasha_messages = [
	'–§—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥, –∏—Ö –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ —Ä–∞–∑.',
	'–ú–æ–∂–Ω–æ, –Ω–æ —Ç–æ–≥–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å, –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–∞–≤–∏—Ç—å –≤–µ–∑–¥–µ –≤—Ä—É—á–Ω—É—é.',
	'–ó–Ω–∞—á–∏—Ç, –µ—ë –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö, –∫–∞–∂–¥–∞—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —Å–≤–æ—é –∑–∞–¥–∞—á—É.',
	'–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π –∞—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî –∑–Ω–∞—á–µ–Ω–∏—è, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –æ–Ω–∞ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å.',
	'–û–±—ã—á–Ω–æ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ return.',
	'–î–∞, –∫–æ–Ω–µ—á–Ω–æ! –¢–∞–∫ —Å—Ç—Ä–æ–∏—Ç—Å—è –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.',
]

vasya_stream = ww.schemas.StreamSchema.put(
	name   = '–í–∞—Å—è',
	role   = 'user',
	author = '–í–∞—Å—è'
)

sasha_stream = ww.schemas.StreamSchema.put(
	name   = '–°–∞—à–∞',
	role   = 'assistant',
	author = '–°–∞—à–∞'
)

for v, s in zip(vasya_messages, sasha_messages):
	vasya_stream.write(v)
	sasha_stream.write(s)

class Life(ww.operators.Agent):
	agents = {
		'character'  : ww.operators.life.Character,
		'summarizer' : ww.operators.Summarizer
	}

	def get_next_author(self):
		dialog_stream = ww.schemas.StreamSchema.zip(*self.state.actors)
		author = self.state.human
		if last_gulp := dialog_stream.last_gulp():
			idx    = self.state.actors.index(last_gulp.author)
			author = self.state.actors[(idx + 1) % len(self.state.actors)]
		return author

	async def summarize(self, author, conversation, beats):
		return await self.agents.summarizer(
			author,
			conversation.last(beats).to_prompt()
		)

	async def get_summaries(self, author):
		conversation = ww.schemas.StreamSchema.zip(*self.state.actors)
		if len(conversation):
			return {
				'long'  : await self.summarize(author, conversation, -1),
				'short' : await self.summarize(author, conversation, 4),
				'last'  : await self.summarize(author, conversation, 1),
			}
		
	async def invoke(self, human, actors):
		streams = {
			'–í–∞—Å—è': vasya_stream,
			'–°–∞—à–∞': sasha_stream,
		}

		while True:
			author  = self.get_next_author()
			message = None

			if author == human:
				message = input(f'{human}: ')
			else:
				summaries = await self.get_summaries(author)
				message   = await self.agents.character(author, actors, summaries)
				print(f'\nü§ñ {author}: {message}\n')

			streams[author].write(message)
